// 'use client'

// import { useState } from "react";

// export function Form() {
//     const [formData, setFormData] = useState({
//         firstName: '',
//         phone: '',
//         message: '',
//         // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
//       });
    
//       const handleChange = (e: any) => {
//         const { name, value } = e.target;
//         setFormData(prevData => ({
//           ...prevData,
//           [name]: value
//         }));
//       };
//     // const botToken = process.env.NEXT_PUBLIC_TOKEN
//     const botToken = process.env.TOKEN
//     console.log(botToken)
//     const chat_id = process.env.CHAT_ID;
//     function sendDataToTelegram(formData: any) {
//         // const botToken = '6845698347:AAFsSq0EAlU42lE–∞–øfue7R8RtVtT397N9BQ'; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
//         // const chatId = '5120801744'; // ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
//         const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`; // URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

//         // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
//         const message = `
//         üì© –í–∞–º –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
//         <b>–ò–º—è:</b> ${formData.firstName}
//         <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}
//           `;

//         // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
//         const params = {
//             chat_id: chat_id, // ID —á–∞—Ç–∞
//             text: message, // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
//             parse_mode: 'HTML' // –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
//         };
//         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é fetch API
//         return fetch(apiUrl, {
//             method: 'POST', // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
//             headers: {
//                 'Content-Type': 'application/json', // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
//             },
//             body: JSON.stringify(params) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JSON
//         }).then(response => response.json()); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
//     }


//     const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
//         e.preventDefault();
//         handleChange;
//         sendDataToTelegram(formData);
//     };

//     // console.log(botToken)


//     return (
//         <div className="flex flex col">
//             <form onSubmit={handleSubmit} id="dataForm" className="flex flex-col">
//                 <h1>–§–æ—Ä–º–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</h1>
//                 <label htmlFor="name">–ò–º—è:</label>
//                 <input type="text" name="name" onChange={handleChange} required />
//                 <label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
//                 <input type="tel" name="phone" onChange={handleChange} required />
//                 <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//             </form>
//         </div>
//     )
// }
'use client'
import { useState } from 'react';

export function ContactForm() {
  const [userInput, setUserInput] = useState({
    username: '',
    phone: '',
  });

//   const handleChange = (e: any) => {
//     const { name, value } = e.target;
//     setUserInput({ ...userInput, [name]: value });
//   };

  const handleChange = (e: any) => {
            const { name, value } = e.target;
            setUserInput(prevData => ({
              ...prevData,
              [name]: value
            }));
          };

  const handleSubmit = async (e: any) => {
    e.preventDefault();

    try {
      const response = await fetch('/api', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userInput),
      });

      if (response.ok) {
        // toast.success('Message sent successfully!');
        setUserInput({ username: '', phone: ''});
      } else {
        // toast.error('Failed to send message.');
      }
    } catch (error) {
    //   toast.error('Error sending message.');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Your Name:</label>
        <input
          type="text"
          name="username"
          value={userInput.username}
          onChange={handleChange}
          required
        />
      </div>
      <div>
        <label>Your Phone:</label>
        <input
          type="text"
          name="phone"
          value={userInput.phone}
          onChange={handleChange}
          required
        />
      </div>
      <button type="submit">Send Message</button>
    </form>
  );
}

export default ContactForm;
